define([svnversion], esyscmd([sh -c "svnversion|tr -d '\n'"]))dnl
AC_INIT([cview],[0.1.svnversion],[evan.felix@pnl.gov])
AC_CONFIG_SRCDIR([configure.in])

AC_CANONICAL_TARGET

AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE

AC_LANG([Objective C])
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_OBJC
AC_PROG_LIBTOOL

OPTBUILD=""
OBJCFLAGS="-g"

AC_ARG_ENABLE([tests],
	AS_HELP_STRING([--enable-tests],[Compile Test Code]),
	[OPTBUILD+=' tests '],
	)

AC_ARG_ENABLE([gcallocdebug],
	AS_HELP_STRING([--enable-gcallocdebug],[Add Class Allocation Debug Code]),
	[AC_DEFINE([GCOBJECTDEBUG], [1],[Debug Object Allocation])],
	[AC_DEFINE([GCOBJECTDEBUG], [0],[Debug Object Allocation])]
)

AC_ARG_WITH([AntTweakBar],AS_HELP_STRING([--with-AntTweakBar=PATH],[Compile With AntTweakBar]),
	[OBJCFLAGS+=" -I$withval/include " ATB_LDFLAGS=" -L$withval/lib "])

if [[ $target_vendor = "apple" ]]; then
	FOUNDATION_LDFLAGS="-framework Foundation"
	FOUNDATION_OBJCFLAGS=""
	OPENGL_LDFLAGS="-framework OpenGL -framework GLUT"
	echo TARGET: $target_os
	base="/Developer/SDKs/MacOSX10.5.sdk/System/Library/Frameworks"
	if [[ $target_os = "darwin8.10.0" ]]; then
		base="/Developer/SDKs/MacOSX10.4u.sdk/System/Library/Frameworks"
	fi
	OPENGL_OBJCFLAGS="-I${base}/OpenGL.framework/Headers/ -I${base}/GLUT.framework/Headers/"
else
	AC_PATH_PROG(GNUSTEP_CONFIG,gnustep-config)
	FOUNDATION_LDFLAGS=" `$GNUSTEP_CONFIG --base-libs` "
	FOUNDATION_OBJCFLAGS=" `$GNUSTEP_CONFIG --objc-flags` "
	OPENGL_LDFLAGS="-lGL -lglut"
	OPENGL_OBJCFLAGS="-I/usr/include/GL "
fi
CPPFLAGS+=" $OPENGL_OBJCFLAGS "
OBJCFLAGS+=" $OPENGL_OBJCFLAGS "

AC_SUBST(FOUNDATION_LDFLAGS)
AC_SUBST(FOUNDATION_CFLAGS)
AC_SUBST(OPENGL_LDFLAGS)
AC_SUBST(OPENGL_CFLAGS)

PKG_CHECK_MODULES([WAND],[Wand])
PKG_CHECK_MODULES([FTGL],[ftgl > 2.1.2])
AC_SUBST(OPTBUILD)


AC_CHECK_HEADERS("gl.h",,[AC_MSG_ERROR([cannot find gl.h])])
AC_CHECK_HEADERS("glu.h",,[AC_MSG_ERROR([cannot find glu.h])])
AC_CHECK_HEADERS("glut.h",,[AC_MSG_ERROR([cannot find glut.h])])
AC_CHECK_HEADERS([limits.h stdlib.h string.h unistd.h])

AC_FUNC_MALLOC
AC_CHECK_FUNCS([memmove memset strdup strtol])

SRC_COND_COMPILES=""
LIBCVIEW_COND_FILES=""

AC_MSG_CHECKING(for OSMesa Usability)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <GL/osmesa.h>]], [[OSMesaCreateContext(0,0)]])],[AC_DEFINE([HAVE_OSMESA], [1],[Have OSMesa library]) AC_MSG_RESULT(yes)
					SRC_COND_COMPILES="$SRC_COND_COMPILES oscview"  
				],[AC_DEFINE([HAVE_OSMESA], [0],[Have OSMesa library]) AC_MSG_RESULT(no) ])

AC_MSG_CHECKING(for AntTweakBar)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <AntTweakBar.h>]], [[TwDraw()]])],[AC_DEFINE([HAVE_ANTTWEAKBAR], [1], [Have AntTweakBar]) 
		AC_MSG_RESULT(yes) 
		LIBCVIEW_COND_FILES="AntTweakBarOverlay.m $LIBCVIEW_COND_FILES"
		ATB_LDFLAGS+=" -lAntTweakBar "
	],[AC_DEFINE([HAVE_ANTTWEAKBAR], [0], [Have AntTweakBar]) AC_MSG_RESULT(no)])
AM_CONDITIONAL([HAVE_ATB],[test "x$LIBCVIEW_COND_FILES" != "x"])

AC_CHECK_PROG([DOXYGEN],[doxygen],[doxygen]) 

CPPFLAGS+=" $FOUNDATION_OBJCFLAGS "
OBJCFLAGS+=" $FOUNDATION_OBJCFLAGS "

AC_SUBST(SRC_COND_COMPILES)
AC_SUBST(LIBCVIEW_COND_FILES)
AC_SUBST(ATB_LDFLAGS)

AC_CONFIG_FILES([Makefile src/Makefile libcview/Makefile libcview-data/Makefile tests/Makefile data/Makefile cview.spec Doxyfile])
AC_OUTPUT

