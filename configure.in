define([svnversion], esyscmd([sh -c "svnversion|tr -d '\n'"]))dnl
AC_INIT([cview],[0.2.svnversion],[evan.felix@pnl.gov])
AC_CONFIG_SRCDIR([configure.in])

AC_CANONICAL_TARGET

AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE

AC_LANG([Objective C])
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_OBJC
AC_PROG_LIBTOOL

OPTBUILD=""
OBJCFLAGS="-g -O0"

AC_ARG_ENABLE([tests],
	AS_HELP_STRING([--enable-tests],[Compile Test Code]),
	[OPTBUILD+=' tests ' AC_DEFINE([CVIEW_TEST_BUILD],[1],[Test programs are being built])],
	[AC_DEFINE([CVIEW_TEST_BUILD],[0],[Test programs are being built])],
	)

AC_ARG_ENABLE([gcallocdebug],
	AS_HELP_STRING([--enable-gcallocdebug],[Add Class Allocation Debug Code]),
	[AC_DEFINE([GCOBJECTDEBUG], [1],[Debug Object Allocation])],
	[AC_DEFINE([GCOBJECTDEBUG], [0],[Debug Object Allocation])]
)

AC_ARG_WITH([AntTweakBar],AS_HELP_STRING([--with-AntTweakBar=PATH],[Compile With AntTweakBar]),
	[OBJCFLAGS+=" -I$withval/include " ATB_LDFLAGS=" -L$withval/lib "])

AC_ARG_WITH([genders],AS_HELP_STRING([--with-genders=PATH],[Compile With genders]),
	[OBJCFLAGS+=" -I$withval/include " GENDERS_LDFLAGS+=" -L$withval/lib "])


if [[ "x$target_vendor" = "xapple" ]]; then
	FOUNDATION_LDFLAGS="-framework Foundation"
	FOUNDATION_OBJCFLAGS=""
	OPENGL_LDFLAGS="-framework OpenGL -framework GLUT"
	echo TARGET: $target_os
	base="/Developer/SDKs/MacOSX10.5.sdk/System/Library/Frameworks"
	if [[ $target_os = "darwin8.10.0" ]]; then
		base="/Developer/SDKs/MacOSX10.4u.sdk/System/Library/Frameworks"
	fi
	OPENGL_OBJCFLAGS="-I${base}/OpenGL.framework/Headers/ -I${base}/GLUT.framework/Headers/"
	dnl cant check library linking on apple
CPPFLAGS+=" $OPENGL_OBJCFLAGS "
OBJCFLAGS+=" $OPENGL_OBJCFLAGS "
	AC_CHECK_HEADERS("gl.h",,[AC_MSG_ERROR([cannot find gl.h])])
	AC_CHECK_HEADERS("glut.h",,[AC_MSG_ERROR([cannot find glut.h])])
else
	AC_PATH_PROG(GNUSTEP_CONFIG,gnustep-config)
	FOUNDATION_LDFLAGS=" `$GNUSTEP_CONFIG --base-libs` "
	FOUNDATION_OBJCFLAGS=" `$GNUSTEP_CONFIG --objc-flags` "
	dnl Test to see if we're on mingw (windows ... yuck!)
	case "$host" in
	*mingw*)
		dnl Maybe shouldn't default to freeglut....
		AC_MSG_NOTICE("host is $host therefore linking against opengl32 and freeglut instead of GL and GLUT")
		OPENGL_LDFLAGS="-lopengl32 -lglu32 -lfreeglut"
		;;
	*)
		OPENGL_LDFLAGS="-lGL -lglut"
		;;
	esac
	OPENGL_OBJCFLAGS="-I/usr/include/GL "
	CPPFLAGS+=" $OPENGL_OBJCFLAGS "
	OBJCFLAGS+=" $OPENGL_OBJCFLAGS "
	AC_CHECK_HEADERS("gl.h",,[AC_MSG_ERROR([cannot find gl.h])])
	AC_CHECK_LIB(GL,glColor4f,,[AC_MSG_ERROR([cannot link with libGL])])
	AC_CHECK_HEADERS("glut.h",,[AC_MSG_ERROR([cannot find glut.h])])
	AC_CHECK_LIB(glut,glutGet,,[AC_MSG_ERROR([cannot link with libglut])])
fi

AC_SUBST(FOUNDATION_LDFLAGS)
AC_SUBST(FOUNDATION_CFLAGS)
AC_SUBST(OPENGL_LDFLAGS)
AC_SUBST(OPENGL_CFLAGS)

PKG_CHECK_MODULES([WAND],[Wand])
AC_CHECK_LIB(MagickWand,NewMagickWand,,,[-lMagickCore])
AC_CHECK_FUNCS(MagickExportImagePixels)

PKG_CHECK_MODULES([FTGL],[ftgl > 2.1.2])
AC_CHECK_LIB(ftgl,ftglCreateExtrudeFont)
AC_SUBST(OPTBUILD)

AC_CHECK_HEADERS([limits.h stdlib.h string.h unistd.h])

AC_MSG_CHECKING(for OpenGL version 1.4 or greater)
AC_COMPILE_IFELSE(
	[AC_LANG_PROGRAM([[#include <gl.h>]], [[float glparm[3]; glPointParameterfv(GL_POINT_SIZE_MIN,glparm);glPointParameterfv(GL_POINT_SIZE_MAX,glparm);]])],
	[AC_DEFINE([HAVE_OPENGL_1_4], [1], [Have OpenGL Version 1.4 or greater]) 
		AC_MSG_RESULT(yes) 
	],
	[AC_DEFINE([HAVE_OPENGL_1_4], [0], [Have OpenGL Version 1.4 or greater]) AC_MSG_RESULT(no)]
	)


AC_FUNC_MALLOC
AC_CHECK_FUNCS([memmove memset strdup strtol])

SRC_COND_COMPILES=""
LIBCVIEW_COND_FILES=""

AC_MSG_CHECKING(for OSMesa Usability)
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#define GLAPIENTRY\n #include <GL/osmesa.h>]], [[OSMesaCreateContext(0,0)]])],
                [
                 AC_MSG_RESULT(yes)
				 AC_CHECK_LIB(OSMesa,OSMesaCreateContext,
                    [AC_DEFINE([HAVE_OSMESA], [1],[Have OSMesa library]) SRC_COND_COMPILES="$SRC_COND_COMPILES oscview"],  
                    [AC_DEFINE([HAVE_OSMESA], [0],[Have OSMesa library]) ],
                 )
				],
				[AC_DEFINE([HAVE_OSMESA], [0],[Have OSMesa library]) AC_MSG_RESULT(no) ]
				)

AC_MSG_CHECKING(for AntTweakBar)
AC_COMPILE_IFELSE(
	[AC_LANG_PROGRAM([[#include <AntTweakBar.h>]], [[TwDraw()]])],
	[AC_MSG_RESULT(yes)
	   AC_CHECK_LIB(AntTweakBar,TwDraw,
	       [AC_DEFINE([HAVE_ANTTWEAKBAR], [1], [Have AntTweakBar]) TRIGGER_ATB="y" ATB_LDFLAGS+=" -lAntTweakBar " ],
	       [AC_DEFINE([HAVE_ANTTWEAKBAR], [0], [Have AntTweakBar])],
	       [-lstdc++]
	   )
	],
	[AC_DEFINE([HAVE_ANTTWEAKBAR], [0], [Have AntTweakBar]) AC_MSG_RESULT(no)]
	)
AM_CONDITIONAL([HAVE_ATB],[test "x$TRIGGER_ATB" != "x"])

GENDERS_FOUND_TRIGGER=""
AC_MSG_CHECKING(for genders)
AC_COMPILE_IFELSE(
	[AC_LANG_PROGRAM([[#include <genders.h>]], [[genders_t handle = genders_handle_create();]])],
	[AC_MSG_RESULT(yes) 
      AC_CHECK_LIB(genders,genders_handle_create,
        [AC_DEFINE([HAVE_GENDERS], [1], [Have genders]) GENDERS_FOUND_TRIGGER="foundit" GENDERS_LDFLAGS+=" -lgenders "],
	    [AC_DEFINE([HAVE_GENDERS], [0], [Have genders])],
      )
	],
	[AC_DEFINE([HAVE_GENDERS], [0], [Have genders]) AC_MSG_RESULT(no)]
	)
AM_CONDITIONAL([COMPILE_GLDATACENTER],[test "x$GENDERS_FOUND_TRIGGER" != "x"])

AC_CHECK_PROG([DOXYGEN],[doxygen],[doxygen]) 

CPPFLAGS+=" $FOUNDATION_OBJCFLAGS "
OBJCFLAGS+=" $FOUNDATION_OBJCFLAGS "

AC_SUBST(SRC_COND_COMPILES)
AC_SUBST(ATB_LDFLAGS)
AC_SUBST(GENDERS_LDFLAGS)

AC_CONFIG_FILES([Makefile src/Makefile libcview/Makefile libcview-data/Makefile tests/Makefile data/Makefile cview.spec Doxyfile])
AC_OUTPUT

